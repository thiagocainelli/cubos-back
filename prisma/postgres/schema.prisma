generator client {
  provider        = "prisma-client-js"
  output          = "../../prisma-outputs/postgres-client"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  uuid         String    @id @default(uuid()) @db.Uuid
  name         String?   @db.VarChar(250)
  email        String?   @unique @db.VarChar(250)
  password     String?
  type         UserType? @default(users)
  profileImage String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  storageUuid  String?   @db.Uuid
  movies       Movies[]  @relation("UserMovie")
  storage      Storage?  @relation("UserProfileImage", fields: [storageUuid], references: [uuid])

  @@index([type])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("users")
}

model Storage {
  uuid      String    @id @default(uuid()) @db.Uuid
  name      String
  key       String
  mimetype  String?   @db.VarChar(200)
  type      String?   @db.VarChar(200)
  url       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  movies    Movies[]  @relation("MoviePoster")
  users     Users[]   @relation("UserProfileImage")

  @@index([name])
  @@map("storage")
}

model Movies {
  uuid              String          @id @default(uuid()) @db.Uuid
  title             String
  originalTitle     String?
  language          String?         @db.VarChar(100)
  situation         MovieSituation? @default(upcoming)
  synopsis          String?
  popularity        Int?            @default(0)
  votesQuantity     Int?            @default(0)
  ratingPercentage  Float?          @default(0)
  trailerUrl        String?
  posterUrl         String?
  budget            Int?
  revenue           Int?
  profit            Int?
  releaseDate       DateTime?       @db.Timestamp(6)
  durationInMinutes Int?
  genre             String[]

  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  // Relations
  posterUuid        String?         @db.Uuid
  userUuid          String?         @db.Uuid
  poster            Storage?        @relation("MoviePoster", fields: [posterUuid], references: [uuid])
  user              Users?          @relation("UserMovie", fields: [userUuid], references: [uuid])

  @@map("movies")
}

enum UserType {
  superAdmin
  users
}

enum MovieSituation {
  upcoming
  released
  canceled
}
