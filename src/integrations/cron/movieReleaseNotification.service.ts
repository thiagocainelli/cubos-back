import * as cron from 'node-cron';
import { sendEmailService } from '../smtpEmail/service/sendEmail.service';
import { getMoviesReleasedToday } from '../../movies/services/getMoviesReleasedToday.service';
import { getAllUsersEmails } from '../../users/services/getAllUsersEmails.service';
import { generateMovieReleaseEmailHTML } from './templates/movieReleaseEmail.template';

export class MovieReleaseNotificationService {
  private static instance: MovieReleaseNotificationService;
  private cronJob: cron.ScheduledTask | null = null;

  private constructor() {}

  public static getInstance(): MovieReleaseNotificationService {
    if (!MovieReleaseNotificationService.instance) {
      MovieReleaseNotificationService.instance = new MovieReleaseNotificationService();
    }
    return MovieReleaseNotificationService.instance;
  }

  public startCronJob(): void {
    // Executa todos os dias √†s 8:00 AM
    this.cronJob = cron.schedule(
      '00 8 * * *',
      async () => {
        console.log('üïê Executando cron de notifica√ß√£o de lan√ßamentos de filmes...');
        await this.sendMovieReleaseNotifications();
      },
      {
        timezone: 'America/Sao_Paulo', // Timezone do Brasil
      },
    );

    console.log('‚úÖ Cron de notifica√ß√£o de lan√ßamentos de filmes iniciado (10:45 AM di√°rio)');
  }

  public stopCronJob(): void {
    if (this.cronJob) {
      this.cronJob.stop();
      this.cronJob = null;
      console.log('‚èπÔ∏è Cron de notifica√ß√£o de lan√ßamentos de filmes parado');
    }
  }

  private async sendMovieReleaseNotifications(): Promise<void> {
    try {
      // Buscar filmes lan√ßados hoje
      const moviesReleasedToday = await getMoviesReleasedToday();

      if (moviesReleasedToday.length === 0) {
        console.log('üìΩÔ∏è Nenhum filme lan√ßado hoje');
        return;
      }

      console.log(`üé¨ Encontrados ${moviesReleasedToday.length} filme(s) lan√ßado(s) hoje`);

      // Buscar todos os usu√°rios
      const userEmails = await getAllUsersEmails();

      if (userEmails.length === 0) {
        console.log('üë• Nenhum usu√°rio encontrado para envio');
        return;
      }

      console.log(`üìß Enviando notifica√ß√µes para ${userEmails.length} usu√°rio(s)`);

      // Enviar e-mail para cada usu√°rio
      await sendEmailService(
        userEmails,
        'üé¨ LAN√áAMENTOS DO DIA',
        generateMovieReleaseEmailHTML(moviesReleasedToday),
      );
      console.log('üéâ Processo de notifica√ß√£o conclu√≠do');
    } catch (error) {
      console.error('‚ùå Erro no cron de notifica√ß√£o de filmes:', error);
    }
  }

  // M√©todo para teste manual
  public async sendNotificationsManually(): Promise<void> {
    console.log('üîß Executando notifica√ß√µes manualmente...');
    await this.sendMovieReleaseNotifications();
  }
}
